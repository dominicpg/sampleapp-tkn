apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: sampleapp-ci
spec:
  description: |
      Basic flow:
      - Clones a subset of mono-repo
      - Lists all the files from the cloned workspace
      - Builds a container image from the workspace, tag it,
        push image to the registry.
      Some additional features:
      - Cloned repo is passed to subsequent Tasks using a Workspace. 
      - Orders Tasks in a Pipeline using "runAfter" so that
        git-clone completes before we try to read from the Workspace 
        to find the Dockerfile and build an image.
      - Uses a volumeClaimTemplate Volume as a Workspace.
      - Registry creds are provided over dockerconfig
  params:
  - name: repoUrl
    type: string
    description: The git repository URL to clone from.
  - name: revision
    type: string
    description: The git branch,tag,sha etc. to fetch
  - name: sparseCheckoutDirectories
    type: string
    description: directory patterns to clone
  - name: imageUrl
    type: string
    description: URL of image repository in user/repo format. Do not provide the tag. e.g. dopsdemo/vote
    default: user/repo
  - name: imageTag
    type: string
    description: Tag to apply to the built image.
    default: latest
  - name: pathToContext
    type: string
    description: The path to the build context relative to your source repo's root. This is used by Kaniko.
    default: .
  - name: pathToDockerFile
    type: string
    description: The path to the dockerfile to build, relative to the context.
    default: Dockerfile
  workspaces:
  - name: shared-data
    description: |
      This workspace will receive the cloned git repo and be passed
      to the next Task to list all cloned files and directories.
  - name: dockerconfig
    description: |
      Add docker's config.json file as a secret and provide it as a reference. 
  tasks:
  - name: fetch-repo
    taskRef:
      name: git-clone
    workspaces:
    - name: output
      workspace: shared-data
    params:
    - name: url
      value: $(params.repoUrl)
    - name: revision
      value: $(params.revision)
    - name: sparseCheckoutDirectories
      value: $(params.sparseCheckoutDirectories)
  - name: misc
    runAfter: ["fetch-repo"]  # Wait until the clone is done before listing all files and directories cloned
    workspaces:
    - name: source
      workspace: shared-data
    params: 
    - name: commit-hash
      value: $(tasks.fetch-repo.results.commit)
    taskSpec:
      workspaces:
      - name: source
      params: 
      - name: commit-hash
      results: 
      - name: current-ts
      - name: short-sha
      steps:
      - image: zshusers/zsh:4.3.15
        script: |
          #!/usr/bin/env zsh
          ls -R $(workspaces.source.path)/
      - name: print-date-unix-timestamp
        image: bash:latest
        script: |
          #!/usr/bin/env bash
          date +%s | tr -d '\n' |  tee $(results.current-ts.path)
      - name: shorten-commit-hash
        image: bash:latest
        script: |
          #!/usr/bin/env bash
          echo $(params.commit-hash) | cut -c -8 | tr -d '\n'|  tee $(results.short-sha.path)
  - name: img-build-publish
    taskRef:
      name: kaniko
    runAfter:
    - misc
    workspaces:
    - name: source
      workspace: shared-data
    - name: dockerconfig
      workspace: dockerconfig
    params:
    - name: CONTEXT
      value: '$(params.pathToContext)'
    - name: IMAGE
      value: '$(params.imageUrl):$(params.revision)-$(tasks.misc.results.short-sha)-$(tasks.misc.results.current-ts)'
  - name: verify-digest
    runAfter:
    - img-build-publish
    params:
    - name: digest
      value: $(tasks.img-build-publish.results.IMAGE-DIGEST)
    taskSpec:
      params:
      - name: digest
      steps:
      - name: bash
        image: ubuntu 
        script: |
          echo $(params.digest)
          case .$(params.digest) in
            ".sha"*) exit 0 ;;
            *)       echo "Digest value is not correct" && exit 1 ;;
          esac
